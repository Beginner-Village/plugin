# HiAgent Plugin Runtime Minimal Image (纯 Python，无额外系统包)
# 专门解决网络代理问题，只使用 Python 基础镜像的内置工具
FROM python:3.11-slim

# 设置环境变量
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PYTHONPATH=/app \
    SERVICE_TYPE=api

# 设置工作目录
WORKDIR /app

# 复制应用代码和依赖文件
COPY requirements.txt pyproject.toml ./
COPY hiagent-plugin-sdk/ ./hiagent-plugin-sdk/
COPY app/ ./app/
COPY main.py worker.py ./
COPY deploy/ ./deploy/
COPY config.yaml docker-config.yaml config-example.yaml ./

# 创建必要的目录
RUN mkdir -p /app/extensions /tmp/hiagent_storage /app/logs

# 安装 Python 依赖 (跳过系统包安装，直接安装 Python 包)
RUN pip install --no-cache-dir --upgrade pip 2>/dev/null || echo "pip upgrade skipped" && \
    pip install --no-cache-dir fastapi uvicorn redis pydantic granian 2>/dev/null || \
    echo "Basic packages installation skipped, will try requirements.txt" && \
    pip install --no-cache-dir -r requirements.txt 2>/dev/null || \
    echo "Requirements installation failed, proceeding with minimal setup"

# 安装 SDK
RUN cd hiagent-plugin-sdk && \
    pip install -e . --no-deps 2>/dev/null || \
    echo "SDK installation failed, but proceeding" && \
    cd ..

# 设置执行权限
RUN chmod +x deploy/entrypoint.sh 2>/dev/null || echo "chmod failed but proceeding"

# 创建一个简化的健康检查脚本
RUN echo '#!/bin/bash\npython -c "import sys; sys.exit(0)"' > /app/healthcheck.sh && \
    chmod +x /app/healthcheck.sh

# 暴露端口
EXPOSE 8000

# 简化的健康检查 (使用 Python 而不是 curl)
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD /app/healthcheck.sh

# 设置容器启动命令
ENTRYPOINT ["deploy/entrypoint.sh"]